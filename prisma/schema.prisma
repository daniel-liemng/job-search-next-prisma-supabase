// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  profile       Profile?
  role          Role      @default(USER)
  companies     Company[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  bio         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

enum Role {
  USER
  EMPLOYER
  ADMIN 
}

model Company {
  id            String    @id @default(cuid())
  name          String
  logo          String?
  desc          String?
  industry      String?
  capacity      String?
  address       String?
  city          String?
  state         String?
  zip           String?
  ownerId       String
  owner         User      @relation(fields: [ownerId], references: [id])
  jobs          Job[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ownerId])
}

model Category {
  id            String    @id @default(cuid())
  name          String
  jobs          Job[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  
}

model Job {
  id            String    @id @default(cuid())
  name          String
  description   String
  requirement   String
  location      String?
  salary        String?
  type          String?
  workType      String?
  schedule      String?
  benefit       String?
  startDate     String?
  status        Boolean   @default(true)
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyId, categoryId])
}

